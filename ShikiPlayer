// ==UserScript==
// @name ShikiPlayer
// @namespace https://github.com/Onzis/ShikiPlayer
// @version 0.8
// @description Автоматически загружает видеоплеер kodik для просмотра прямо на Shikimori
// @author Onzis
// @match https://shikimori.one/*
// @homepageURL https://github.com/Onzis/ShikiPlayer
// @grant none
// @updateURL https://github.com/Onzis/ShikiPlayer/raw/refs/heads/main/manifest.user.js
// @downloadURL https://github.com/Onzis/ShikiPlayer/raw/refs/heads/main/manifest.user.js
// ==/UserScript==

(function () {
    'use strict';

    let currentPath = location.pathname;
    let observer = null;

    function getShikimoriID() {
        const match = location.pathname.match(/\/animes\/(?:[a-z])?(\d+)/);
        const id = match ? match[1] : null;
        console.log('[WatchButton] Shikimori ID (из URL):', id);
        return id;
    }

    function removeOldElements() {
        const oldIframe = document.querySelector('iframe[src*="kodik.cc"]');
        if (oldIframe) {
            console.log('[WatchButton] Удаляю старый iframe');
            oldIframe.remove();
        }
    }

    function insertPlayerContainer() {
        console.log('[WatchButton] Попытка вставить плеер на', location.pathname);

        if (!/^\/animes\/[^/]+/.test(location.pathname)) {
            console.log('[WatchButton] Не страница аниме — пропуск');
            return;
        }

        removeOldElements();

        let relatedBlock = document.querySelector('.cc-related-authors'); // Попытка 1

        if (!relatedBlock) {
            console.log('[WatchButton] Попытка 2 — блок "Связанное" не найден, жду 500 мс...');
            setTimeout(() => {
                relatedBlock = document.querySelector('.cc-related-authors'); // Попытка 2
                if (!relatedBlock) {
                    console.log('[WatchButton] Блок "Связанное" так и не был найден');
                    return;
                }
                createAndInsertPlayer(relatedBlock);
            }, 500);
            return;
        }

        createAndInsertPlayer(relatedBlock);
    }

    function createAndInsertPlayer(relatedBlock) {
        console.log('[WatchButton] Создаю контейнер для плеера...');

        // Создаем новый контейнер
        const playerContainer = document.createElement('div');
        playerContainer.classList.add('kodik-container');
        playerContainer.innerHTML = `
            <div class="kodik-header">
                <span class="kodik-title">ОНЛАЙН ПРОСМОТР</span>
                <div class="kodik-links">
                    <a href="https://github.com/Onzicry/ShikiPlayer">GitHub</a>
                </div>
            </div>
            <div class="player-wrapper"></div>
        `;

        // Добавляем стили для контейнера
        playerContainer.style.cssText = `
            margin-top: 20px; /* Верхний отступ */
            margin-bottom: 20px; /* Нижний отступ (по желанию) */
            width: 900px; /* Ширина контейнера */
            max-width: 100%; /* Адаптивность */
        `;

        // Стили для заголовка
        const header = playerContainer.querySelector('.kodik-header');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #e6e8ea; /* Серый фон */
            padding: 8px 12px;
            font-weight: bold;
            color: #333;
        `;

        const title = playerContainer.querySelector('.kodik-title');
        title.style.cssText = `
            font-size: 14px;
        `;

        const linksContainer = playerContainer.querySelector('.kodik-links');
        linksContainer.style.cssText = `
            display: flex;
            align-items: center;
            gap: 4px; /* Расстояние между ссылками */
        `;

        const links = linksContainer.querySelectorAll('a');
        links.forEach(link => {
            link.style.cssText = `
                text-decoration: none;
                color: #333;
                font-size: 12px;
                font-weight: normal;
            `;
        });

        const separators = linksContainer.querySelectorAll('span');
        separators.forEach(separator => {
            separator.style.cssText = `
                color: #999;
                font-size: 12px;
            `;
        });

        // Получаем iframe
        const id = getShikimoriID();
        if (!id) {
            console.log('[WatchButton] ID не найден, прерывание');
            return;
        }

        console.log('[WatchButton] Создаю iframe для ID:', id);
        const iframe = document.createElement('iframe');
        iframe.src = `https://kodik.cc/find-player?shikimoriID=${id}`;
        iframe.width = '900'; // Ширина iframe
        iframe.height = '500'; // Высота iframe
        iframe.frameBorder = '0';
        iframe.allowFullscreen = true;
        iframe.setAttribute('allow', 'autoplay *; fullscreen *');

        const playerWrapper = playerContainer.querySelector('.player-wrapper');
        if (!playerWrapper) {
            console.log('[WatchButton] .player-wrapper не найден');
            return;
        }

        playerWrapper.appendChild(iframe);
        console.log('[WatchButton] iframe вставлен в .player-wrapper');

        // Вставляем контейнер перед блоком "Связанное"
        relatedBlock.parentNode.insertBefore(playerContainer, relatedBlock);
        console.log('[WatchButton] Контейнер с плеером вставлен перед .cc-related-authors');
    }

    function setupDOMObserver() {
        if (observer) observer.disconnect();

        observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                if ([...mutation.addedNodes].some(node => node.nodeType === 1 && node.querySelector?.('.cc-related-authors'))) {
                    console.log('[WatchButton] MutationObserver сработал — найдены изменения с .cc-related-authors');
                    setTimeout(insertPlayerContainer, 100);
                    break;
                }
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true,
        });

        console.log('[WatchButton] MutationObserver активирован');
    }

    function watchURLChanges() {
        setInterval(() => {
            if (location.pathname !== currentPath) {
                console.log('[WatchButton] Обнаружено изменение URL:', location.pathname);
                currentPath = location.pathname;
                setTimeout(insertPlayerContainer, 500);
            }
        }, 300);
    }

    // Инициализация
    console.log('[WatchButton] Скрипт запущен');
    setupDOMObserver();
    watchURLChanges();
    insertPlayerContainer();
})();